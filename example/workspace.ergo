^ergo std

c++ = ergo ..
project-root = script:dir:
prelude = {c++}
build = fn :toolchain :p -> {
    # Load requested output
    output = ergo <| path:join :project-root :p
    c++:get-output {project-root, toolchain} :output
}
dist = fn :result -> seq ^[
    out = path:join :project-root dist
    fs:create-dir :out
    fs:copy result:file :out
    collection:map (fn :f -> fs:copy :f :out) result:runtime
    ()
]

debug-toolchain = c++:toolchain {
    compile-flags = [-Og, -g]
    link-flags = [-Og]
}

release-toolchain = c++:toolchain {
    compile-flags = [-O2]
    link-flags = [-O2, -s]
}

debug = fn :p -> dist <| build :debug-toolchain :p
release = fn :p -> dist <| build :release-toolchain :p
run = fn :p -> build :debug-toolchain :p |>:exec arg

command = fn :cmd ^:args -> match :cmd ^[
    debug -> debug ^:args
    release -> release ^:args
    run -> run ^:args
]
