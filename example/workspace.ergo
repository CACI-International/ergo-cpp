^(ergo std)

c++ = ergo ..
project-root = :work-dir
prelude = {c++}
build = fn cflags lflags p -> {
    # Load requested output
    output = ergo (path:join :work-dir :p)
    c++:apply-context :project-root :cflags :lflags :output
}
dist = fn result -> {
    seq ^[
        out = path:join :work-dir dist
        fs:create-dir :out
        fs:copy result:file :out
        collection:map (fn f -> fs:copy :f :out) result:runtime
        ()
    ]
}
build-debug = fn p -> build [-Og,-g] [-Og] :p
debug = fn p -> dist <| build-debug :p
release = fn p -> dist <| build [-O2] [-O2,-s] :p
run = fn p -> build-debug :p |>:exec arg

fn cmd ^args -> match :cmd {
    =prelude = :prelude
    =debug = debug ^:args
    =release = release ^:args
    =run = run ^:args
}
