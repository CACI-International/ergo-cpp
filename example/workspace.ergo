std:import {:fs, :match, :Iter, :Path} = $std

c++ = load ..
project-root = std:source:dir ()
build = fn :toolchain :p -> {
    # Load requested output
    output = std:load-lazy <| Path:join $project-root $p
    # Bind context
    c++:bind-context {project-root, toolchain} $output
}
dist = fn :module -> {
    out = Path:join $project-root dist
    c++:Module:@ { :output, ^_ } = $module
    fs:remove $out
    fs:create-dir $out
    Iter:map (fn :f -> fs:copy $f $out) <| c++:Module:runtime $module
    ()
}

debug-toolchain = c++:toolchain {
    compile-flags = [-Og, -g]
    link-flags = [-Og]
}

release-toolchain = c++:toolchain {
    compile-flags = [-O2]
    link-flags = [-O2, -s]
}

debug = fn :p -> dist <| build $debug-toolchain $p
release = fn :p -> dist <| build $release-toolchain $p
run = fn :p -> c++:Module:exec <| build $debug-toolchain $p

write-commands = fn :module -> fs:copy (c++:Module:compile-commands $module) $project-root

## Commands include:
## * `debug TARGET`
## * `release TARGET`
## * `run TARGET`
## * `compile-commands (debug|release) TARGET`
command = match:value [
    fn debug :p -> debug $p
    fn release :p -> release $p
    fn run :p -> run $p
    fn compile-commands debug :p -> write-commands <| build $debug-toolchain $p
    fn compile-commands release :p -> write-commands <| build $release-toolchain $p
]

##std:doc:module
## workspace
{command, c++}
