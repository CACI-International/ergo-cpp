# The c++ module provides an abstraction over c++ compilation and linking.
# This module assumes binaries that are compatible with gcc flags (typically gcc and clang).

std:import { cache, default, env, exec, fs, match, task } = std:
std:import { Array, Bool, Iter, Map, Path, String } = std:

log = std:log:sublog c++

script-dir = std:source:dir ()

## Return the value of an environment variable, or an alternative value if not set.
env-or = fn :name :alternative -> default (env:get :name) as :alternative

## Run an executable as a task (counting as one task).
run = fn :description ^:args -> task (count = 1) :description (exec ^:args):complete

# TODO divorce the linking/native/binutils stuff from c/c++, separate c and c++ into separate
# libraries

## Create a toolchain from the given configuration.
##
## Arguments: `(Map :config)`
## 
## The `config` may contain the following optional keys:
## * `compiler` - The compiler to use (as a binary name or path), defaulting to `c++`.
## * `c-compiler` - The C compiler to use (as a binary name or path), defaulting to `cc`.
## * `archiver` - The archiver to use (as a binary name or path), defaulting to `ar`.
## * `ranlib` - The ranlib binary to use (as a binary name or path), defaulting to `ranlib`.
## * `object-copy` - The object-copy binary to use (as a binary name or path), defaulting to
## `objcopy`.
## * `object-dump` - The tool to inspect generated object files (as a binary or path), defaulting to
##   `objdump`.
## * `addr2line` - The addr2line binary to use (as a binary name or path), defaulting to
## `addr2line`.
## * `dlltool` - The dlltool binary to use (as a binary name or path), defaulting to `dlltool`.
## * `nm` - The nm binary to use (as a binary name or path), defaulting to `nm`.
## * `readelf` - The readelf binary to use (as a binary name or path), defaulting to `readelf`.
## * `strip` - The strip binary to use (as a binary name or path), defaulting to `strip`.
## * `libtool` - The libtool binary to use (as a binary name or path), defaulting to `libtool`.
## * `install-name-tool` - The install-name-tool binary to use (as a binary name or path),
## defaulting to `install_name_tool`.
## * `lipo` - The lipo binary to use (as a binary name or path), defaulting to `lipo`.
## * `compile-flags` - Flags to always pass to `compiler` when compiling source code.
## * `c-compile-flags` - Flags to always pass to `c-compiler` when compiling C source code.
## * `link-flags` - Flags to always pass to `compiler` when linking compiled code.
##
## The returned toolchain is a map with the following keys:
## * `compiler` - The resolved C++ compiler
## * `c-compiler` - The resolved C compiler
## * `archiver` - The resolved archiver program
## * `ranlib` - The resolved ranlib program
## * `object-copy` - The resolved object-copy program
## * `object-dump` - The resolved object-dump program
## * `addr2line` - The resolved addr2line program
## * `dlltool` - The resolved dlltool program
## * `nm` - The resolved nm program
## * `readelf` - The resolved readelf program
## * `strip` - The resolved strip program
## * `libtool` - The resolved libtool program
## * `install-name-tool` - The resolved install-name-tool program
## * `lipo` - The resolved lipo program
## * `compile-flags` - The compile flags to use with the C++ compiler
## * `c-compile-flags` - The compile flags to use with the C compiler
## * `link-flags` - The link flags to use when linking
## * `target` - A map containing the following target-specific keys:
##   * `architecture` - The toolchain target architecture (`arm`, `aarch64`, `i386`, `x86_64`,
##   `unknown`)
##   * `os` - The toolchain target operating system (`windows`, `linux`, `ios-simulator`, `ios`,
##   `macos`, `unknown`)
##   * `compiler` - The type of the toolchain compiler (`clang`, `gcc`, `msvc`, `unknown`)
##   * `c++lib` - The type of the toolchain's C++ library (`libstdc++`, `libc++`, `msvc`, `unknown`)
##   * `c++abi` - The target ABI of the toolchain (`c++11`, `c++03`)
##   * `lib-path-env` - A function that returns the env to set to add a Path to the library search
##   path.
##   * `preload-libraries` - A function that returns the env to set to add a list of library Paths
##   to the preloaded libraries.
##   * `static-library-name` - A function that returns the filesystem name for a particular static
##   library name.
##   * `dynamic-library-name` - A function that returns the filesystem name for a particular dynamic
##   library name.
##   * `exe-name` - A function that returns the filesystem name for a particular executable name.
toolchain = fn {
    compiler = default :compiler as c++
    c-compiler = default :c-compiler as cc
    archiver = default :archiver as ar
    ranlib = default :ranlib as ranlib
    object-copy = default :object-copy as objcopy
    object-dump = default :object-dump as objdump
    addr2line = default :addr2line as addr2line
    dlltool = default :dlltool as dlltool
    nm = default :nm as nm
    readelf = default :readelf as readelf
    strip = default :strip as strip
    libtool = default :libtool as libtool
    install-name-tool = default :install-name-tool as install_name_tool
    lipo = default :lipo as lipo
    
    compile-flags = default :compile-flags as []
    c-compile-flags = default :c-compile-flags as []
    link-flags = default :link-flags as []
} -> {
    compiler = env:path-search :compiler
    c-compiler = env:path-search :c-compiler
    archiver = env:path-search :archiver
    ranlib = env:path-search :ranlib
    object-copy = env:path-search :object-copy
    object-dump = env:path-search :object-dump
    addr2line = env:path-search :addr2line
    dlltool = env:path-search :dlltool
    nm = env:path-search :nm
    readelf = env:path-search :readelf
    strip = env:path-search :strip
    libtool = env:path-search :libtool
    install-name-tool = env:path-search :install-name-tool
    lipo = env:path-search :lipo

    detect = fn :filename -> {
        result = std:by-content <| cache {
            file = Path:join :script-dir detection :filename
            exec-result = exec (env = { PATH = env:get PATH }) :compiler ^:compile-flags -xc++-header -imacros cassert -E -P :file
            exec-result:complete
            String:format '"{}"' :result _ = String:trim <| String:from exec-result:stdout
            :result
        }
        log:debug <| String:format "detection file `{}` yielded `{}`" :filename :result
        :result
    }

    {
        compiler
        c-compiler
        archiver
        ranlib
        object-copy
        object-dump
        addr2line
        dlltool
        nm
        readelf
        strip
        libtool
        install-name-tool
        lipo

        compile-flags
        c-compile-flags
        link-flags
        target = {
            architecture = detect arch.h
            os = detect os.h
            compiler = detect compiler.h
            c++lib = detect cpplib.h

            c++abi = match :c++lib [
                libstdc++ -> detect gnu_abi.h
                _         -> c++11
            ]

            ## Get the environment variables that should be set to add a path to the library lookup path.
            lib-path-env = match :os [
                macos -> fn :path -> { DYLD_LIBRARY_PATH = :path }
                ios   -> fn :path -> { DYLD_LIBRARY_PATH = :path }
                linux -> fn :path -> { LD_LIBRARY_PATH = :path }
                _     -> fn :path -> { PATH = :path }
            ]

            ## Get the environment variables that should be set to preload an array of libraries.
            ##
            ## Arguments: `(Array:Of :Path |> :libs)`
            preload-libraries = match :os [
                macos -> fn :libs -> { DYLD_INSERT_LIBRARIES = String:join ":" <| Iter:map (std:Function:partial String:format "{}") :libs }
                ios -> fn :libs -> { DYLD_INSERT_LIBRARIES = String:join ":" <| Iter:map (std:Function:partial String:format "{}") :libs }
                linux -> fn :libs -> { LD_PRELOAD = String:join ":" <| Iter:map (std:Function:partial String:format "{}") :libs }
                _ -> fn _ -> {}
            ]

            ## Get the filename for a static library with the given name.
            static-library-name = match :os [
                windows -> fn :name -> String:format "{}.lib" :name
                _       -> fn :name -> String:format "lib{}.a" :name
            ]

            ## Get the filename for a dynamic library with the given name.
            dynamic-library-name = match :os [
                windows -> fn :name -> String:format "{}.dll" :name
                linux   -> fn :name -> String:format "lib{}.so" :name
                macos   -> fn :name -> String:format "lib{}.dylib" :name
                ios     -> fn :name -> String:format "lib{}.dylib" :name
                _       -> fn :name -> :name
            ]

            ## Get the filename for an executable with the given name.
            exe-name = match :os [
                windows -> fn :name -> String:format "{}.exe" :name
                _       -> fn :name -> :name
            ]
        }
    }
}

env-toolchain = {
    ## Parse space-separated flags from an environment variable, if set.
    parse-env-flags = fn :var -> {
        strs = String:split " " (env-or :var "")
        Array:from <| Iter:filter (fn :v -> match :v ["" -> Bool:false, _ -> Bool:true]) :strs
    }

    env-vars = {
        compiler = CXX
        c-compiler = CC
        archiver = AR
        ranlib = RANLIB
        object-copy = OBJCOPY
        object-dump = OBJDUMP
        addr2line = ADDR2LINE
        dlltool = DLLTOOL
        nm = NM
        readelf = READELF
        strip = STRIP
        libtool = LIBTOOL
        install-name-tool = INSTALL_NAME_TOOL
        lipo = LIPO
    }

    env-flags = {
        compile-flags = CXXFLAGS
        c-compile-flags = CFLAGS
        link-flags = LDFLAGS
    }

    map-values = fn :f :m -> Map:from <| Iter:map (fn :e -> std:MapEntry: e:key (!std:eval <| f e:value)) :m

    ## A toolchain based on the environment.
    ## 
    ## This toolchain is derived from the following environment variables:
    ## {{String:join "\n" <| Iter:map (fn :e -> String:format '* `{}`' e:value) <| Iter:flatten [:env-vars,:env-flags]}}
    ##
    ## If any of these variables are not set, the default value (per `toolchain`) is used instead.
    toolchain {
        ^map-values env:get :env-vars
        ^map-values :parse-env-flags :env-flags
    }
}

## Handles caching of the given path.
##
## Returns `[:path, :getter]`, where:
## * `path` is the same file path as the input, identified based on content if `file-content-cache` is
## true, and otherwise based on `depends`.
## * `getter` is the function to use to retrieve the path when given the means of writing the path.
##   * I.e. you use the returned `path` in some expression that will write to it, and pass that
##   expression to `getter`.
cached-path = fn :cache-policy :path :depends -> {
    match :cache-policy [
        content -> [:path,:cache]
        configuration -> {
            # We want the path to be explicitly cached on the deps.
            out = cache <| !std:variable ^{ depends } :path
            get-value = fn :v -> {
                # Get the file which tracks the last writer
                last-writer-file = cache <| !std:variable (depends = [last-writer, :out]) Path:new:
                # Create a string which tracks the argument
                String :me = std:identity :v
                # Read the last writer, if any.
                String :last-writer = String:from (std:if (fs:exists :last-writer-file) (fs:read :last-writer-file) "")
                # Shortcut and return `out` if the last writer was this value.
                # The returned value should have the same identity as `v`
                Path :p = match :last-writer [
                    !:me -> :out
                    _ -> {
                        fs:remove :last-writer-file
                        :v
                        fs:write :last-writer-file :me
                        :out
                    }
                ]
                !std:variable (depends = :v) :p
            }
            [:out,:get-value]
        }
    ]
}

toolchain-compile-flags = fn :toolchain -> [
    ^toolchain:compile-flags
    ^default toolchain:extra-compile-flags as []
]

## Compile a file with the given flags.
## The project-root argument is used to ensure the file paths in compiled debug sections are user-friendly.
compile = fn :cache-policy :toolchain :project-root :file :untracked-flags ^:flags -> {
    proj-path = !Path:relative :project-root :file
    out = Path:join Path:new: <| String:format "{}.o" :proj-path
    flags = flags:positional

    [:out,:ocache] = cached-path :cache-policy :out [:proj-path, toolchain:compiler, !toolchain-compile-flags :toolchain, :flags]

    {
        object = ocache {
            fs:create-dir <| Path:parent :out
            run (String:format "compiling {}" :file) (env = { PATH = env:get PATH }) toolchain:compiler ^(toolchain-compile-flags :toolchain) -c -o :out ^(!std:variable :untracked-flags) ^:flags :file
            :out
        }
        compile-command = {
            arguments = Array:from <| Iter:map String:from <| Iter:flatten [[toolchain:compiler], toolchain-compile-flags :toolchain, [-c,-o,:out], !std:variable :untracked-flags, :flags, [:file]]
            file = String:from :file
            output = String:from :out
            directory = "/"
        }
    }
}

## Convert an array of header directories to include arguments for the compiler.
to-includes = fn :header-dirs -> {
    :header-dirs | Iter:map (fn :d -> [-I,:d]) | Iter:flatten | Array:from
}

## The Module type.
##
## Internally, the type holds a single value, often a dynamic one that yields a Map.
Module = std:type:new (bind = _ -> :v -> std:Error: (source=:v) "cannot directly access Module") "ergo-cpp:Module" <| match:value [
    fn :v -> cache ^no-persist :v
    pat :out -> :v -> bind :out :v
]

## Return a file path that depends on all include dependencies, given a map of header paths to dependencies
## that will be used for includes that do not resolve to a file.
set-file-deps = fn ^{ banned-headers } :toolchain (Path :file) :untracked-compile-flags :compile-flags :known-headers -> {
    deps = cache {
        deps = (exec (env = { PATH = env:get PATH }) toolchain:compiler
                ^(!toolchain-compile-flags :toolchain) -DERGO_CPP_HEADER_DEPENDS -MM -MG ^(!std:variable :untracked-compile-flags)
                ^:compile-flags (!fs:track :file)):stdout | String:from | String:trim
        String:format "{}: {}" _ :parts = :deps
        (:parts
        # Split on continuation newlines from make syntax
        | String:split "\\\n"
        # Split on spaces (XXX this will break on filenames with spaces)
        | Iter:map (fn :p -> String:split " " :p) | Iter:flatten
        # Remove empty parts
        | Iter:filter (fn :v -> match :v ["" -> Bool:false,_ -> Bool:true]))
    }
    # split files based on whether they exist or not
    {exist,to-check} = cache {
        Iter:zip :exist :to-check = Iter:map (fn :dep -> std:if (fs:exists <| Path:join :dep) [:dep,:unset] [:unset,:dep]) :deps
    }
    Array :exist-depends = Array:from <| Iter:map fs:track :exist
    banned-check = std:if :banned-headers (fn :x -> std:if banned-headers::x { std:Error: (source=:file) <| String:format "private include ({}) used in public header {}" :x :file }) (fn _ -> ())
    String :id = cache {
        Array :known-depends = Array:from <| Iter:no-errors <| Iter:map (fn :dep -> !std:eval <| match known-headers::dep [ std:Unset -> banned-check :dep, std:Function:pass ]) :to-check
        std:identity [:exist-depends, :known-depends, !fs:track :file, toolchain:compiler, !toolchain-compile-flags :toolchain, :compile-flags]
    }
    std:variable (depends=:id) :file
}

glob-src = fn :dir :pattern -> fs:glob <| Path:join :dir :pattern

## Get `files` in the current script directory.
##
## The return value is suitable to be passed directly as the `files` key in the `module`
## configuration.
all-files = fn (dir = std:Path:or-source ^parent :dir) -> glob-src :dir *.cpp

## Get `headers` from a heirarchical description.
##
## Arguments: `:descr`
##
## `decr` may be one of:
## * `all` to get all headers in the current script directory,
## * an `Array` of files, or
## * a `Map` where keys are the `#include` path components and values are
##   recursively evaluated as `descr`.
##
## The return value is suitable to be passed directly as the `headers` key in the `module`
## configuration.
header-paths = {
    inner = std:Function:recursive <| fn :self :descr -> {
        match :descr [
            all -> Iter:map (fn :a -> std:MapEntry: (!Path:join (Path:name :a)) :a) <| glob-src (default (std:source:dir :descr) as std:env:current-dir) *.h
            Array :files -> Iter:map (fn :a -> std:MapEntry: (!Path:join (Path:name (Path:join :a))) (Path:join :a)) :files
            Map :dirs -> {
                Iter:flatten <| Iter:map (fn (std:MapEntry: :key :val) -> {
                    paths = self :self :val
                    key = Path:join ^(String:split / :key)
                    Iter:map (fn (std:MapEntry: :to :from) -> std:MapEntry: (!Path:join :key :to) :from) :paths
                }) :dirs
            }
        ]
    }
    fn :descr -> Map:from <| inner :descr
}

## Convert a path to an include string.
path-to-include = fn :p -> String:join "/" <| Path:split :p

modules = Array:Of :Module
match-uses = pat :tgt -> match:value [
    { private = default (modules :private) as []
      public = default (modules :public) as []
      export = default (modules :export) as []
    } -> {
        bind :tgt { private, public, export }
    }

    default (modules :uses) as [] -> {
        bind :tgt { private = :uses, public = [], export = [] }
    }
]

vis = {
    map = fn (std:Function :f) :v -> {
        private = f v:private
        public = f v:public
        export = f v:export
    }
    internal = fn :v -> Iter:flatten [v:public, v:private]
    external = fn :v -> Iter:flatten [v:public, v:export]
    all = fn :v -> Iter:flatten [v:public, v:private, v:export]
    eval = fn :v -> {
        internal = internal :v
        external = external :v
    }
    map* = fn (std:Function :f) :v -> {
        internal = f v:internal
        external = f v:external
    }
}

context-key = "ergo-cpp:context"

eval-when = fn _ :val -> !std:eval :val

## The ergo-cpp context.
##
## This is a dynamic binding evaluating to a `Map` containing:
## * `Path :project-root` - The root directory of the project.
## * `:toolchain` - The toolchain to use.
## * `Map :options` - Additional options affecting compilation and linking.
## * `Map :extra` - User-defined values.
context = std:dynamic:get :context-key

context-fn = pat :ctx ^:rest -> :v -> {
    bind :ctx <| !eval-when :v :context
    bind :rest :v
}

## Evaluate uses.
##
## Arguments: `:uses`
##
## `uses` should be the output of a `match-uses` binding, specifically a map of
## private/public/export uses modules.
##
## Returns a map with:
## * `uses` - all uses outputs
## * `header-dirs` - a map of internal/external header-dirs
## * `header-deps` - a map of internal/external header-deps
eval-uses = fn :uses -> {
    uses = vis:map (std:Function:partial Iter:map (fn (Module: :u) -> :u)) :uses
    int-ext = vis:eval :uses
    uses-header-dirs = vis:map* (fn :uses -> <| :uses | Iter:map (fn :m -> m:header-dirs) | Iter:flatten | Iter:unique) :int-ext
    uses-header-deps = vis:map* (fn :uses -> <| :uses | Iter:map (fn :m -> m:header-deps) | Iter:filter (fn :a -> :a) | Iter:flatten | Map:from) :int-ext
    {
        uses = vis:all :uses
        header-dirs = :uses-header-dirs
        header-deps = :uses-header-deps
    }
}

module-result = fn :all-uses { impl, runtime, compile-commands, header-dirs, header-deps, ^:rest } -> {
    impl = Array:from <| Iter:unique <| Iter:flatten [
        Iter:map (fn :m -> m:impl) :all-uses | Iter:flatten
        :impl
    ]
    runtime = Array:from <| Iter:unique <| Iter:flatten [
        Iter:map (fn :m -> m:runtime) :all-uses | Iter:flatten
        Iter:map (fn :m -> m:runtime-if-used) :all-uses | Iter:filter (fn :a -> :a) | Iter:flatten
        :runtime
    ]
    compile-commands = Array:from <| Iter:unique <| Iter:flatten [
        :all-uses | Iter:map (fn :u -> u:compile-commands) | Iter:filter (fn :a -> :a) | Iter:flatten
        :compile-commands
    ]

    { impl, header-dirs = header-dirs:external, header-deps = header-deps:external, runtime, compile-commands, ^:rest }
}

## Create a module with the given configuration.
##
## Arguments: `(Map :config)`
## 
## The configuration should be a map with the following optional keys:
## * `files`: an array of the files to compile
## * `headers`: a map with the headers to expose, where the key is the `#include` Path and the value
##   is the header file Path.
## * `uses`: the modules to use with this module, either an array (with private visibility) or a map
##   with the following optional keys:
##   * `public`: an array of modules which will be used when compiling files in this module
##     and will be visible to consumers of this module.
##   * `private`: an array of modules which will be used when compiling files in this module.
##   * `export`: an array of modules which will be visible to consumers of this module.
## * `compile-flags`: additional compilation flags to use when compiling files in this module
## 
## In both files and headers, if a file is a relative path, it will be relative to the calling
## script directory. To set the relative path explicitly, pass the keyed argument `relative-dir`.
## 
## The returned value will be a Module, where the output will be a map with the following keys:
## * `impl`: an array of compiled object files
## * `header-dirs`: an array of header directories exported by the module (and all directories from used modules)
## * `header-deps`: a map from header paths to the file to which they resolve
##   (where the file value also incorporates all header dependencies when deriving
##   its identity)
## * `runtime`: an array of any additional requirements of the module (inherited from used modules)
## * `compile-commands`: an array of compile commands to build the module and all dependent modules
module = context-fn :ctx (relative-dir = std:Path:or-source ^parent :relative-dir) {
    files = default (Array :files) as []
    headers = default (Map :headers) as {}
    uses = match-uses :uses
    compile-flags = default (Array :compile-flags) as []
} -> Module: {
    files = !Iter:map (fn :f -> !fs:track <| Path:join :relative-dir :f) :files
    headers-spec = :headers
    headers = !Iter:map (fn (std:MapEntry: :to :from) -> std:MapEntry: :to (!fs:track <| Path:join :relative-dir :from)) :headers
    evaled = eval-uses :uses

    header-dir = {
        [:dir,:hdcache] = cached-path ctx:options:cache-policy Path:new: [:headers-spec, :relative-dir]
        hdcache {
            fs:remove :dir # Clear any existing directory
            fs:create-dir :dir # Ensure path exists if empty
            Array:from <| Iter:map (fn (std:MapEntry: :to :from) -> fs:copy :from (Path:join :dir :to)) :headers
            :dir
        }
    }

    header-dirs = vis:map* (fn :header-dirs -> Array:from <| Iter:flatten [[:header-dir], :header-dirs]) evaled:header-dirs

    includes = to-includes header-dirs:internal

    # headers should have file-deps based on the external `uses` header-deps to ensure no headers depends on internal uses 
    # ban internal header-deps so that if they are used, an error will occur about exposing a private module
    mod-header-deps = !Iter:map (fn (std:MapEntry: :to :from) -> {
        std:MapEntry: (path-to-include :to) (
            !std:eval <| set-file-deps (banned-headers = evaled:header-deps:internal)
                ctx:toolchain :from [-I,:header-dir] :compile-flags evaled:header-deps:external
            )
    }) :headers
    header-deps = vis:map* (fn :uses-header-deps -> Map:from <| Iter:flatten [:uses-header-deps,:mod-header-deps]) evaled:header-deps

    compiles = !Iter:map (fn :f -> (compile ctx:options:cache-policy ctx:toolchain ctx:project-root
            (!std:eval <| set-file-deps ctx:toolchain :f [] :compile-flags header-deps:internal) :includes ^:compile-flags)
        ) :files
    objects = Iter:map (fn :c -> c:object) :compiles
    compile-commands = Iter:map (fn :c -> c:compile-command) :compiles

    module-result evaled:uses { impl = :objects, runtime = [], compile-commands, header-dirs, header-deps }
}

## Create a module that is already compiled.
##
## Arguments: `(Map :config)`
## 
## The configuration should be a map with the following optional keys:
## * `Array :link` - object files/libraries to link
## * `(Array:Of :Path) :include-dirs` - include directories
## * `(Array:Of :Path) :runtime` - libraries (typically dynamic) needed at runtime
## * `(Map :header-deps)` - a map from include path to header file path, which helps in resolving header dependencies
## * `Array :compile-commands` - an array of compile commands that are used to produce the module,
##   where items are maps with:
##   * `Array :arguments` - the arguments in the compile command (including executable)
##   * `Path :file` - the input file of the command (absolute path)
##   * `Path :out` - the output file of the command (absolute path)
## * `uses`: the modules to use with this module, either an array (with private visibility) or a map
##   with the following optional keys:
##   * `public`: an array of modules which will be used when compiling files in this module
##     and will be visible to consumers of this module.
##   * `private`: an array of modules which will be used when compiling files in this module.
##   * `export`: an array of modules which will be visible to consumers of this module.
##
##  Any additional keys in the config map will be copied in the module result.
## 
## The returned value will be a Module, where the output will be a map with the following keys:
## * `impl`: an array of compiled object files
## * `header-dirs`: an array of header directories exported by the module (and all directories from used modules)
## * `header-deps`: a map from header paths to the file to which they resolve
##   (where the file value also incorporates all header dependencies when deriving
##   its identity)
## * `runtime`: an array of any additional requirements of the module (inherited from used modules)
## * `compile-commands`: an array of compile commands to build the module and all dependent modules
## * additional keys from the config map
compiled-module = fn {
    link = default (Array :link) as []
    include-dirs = default (Array:Of :Path |> :includes) as []
    runtime = default (Array:Of :Path |> :runtime) as []
    header-deps = default (Map :header-deps) as {}
    compile-commands = default (Array :compile-commands) as []
    uses = match-uses :uses
    ^:rest
} -> Module: {
    evaled = eval-uses :uses
    header-dirs = vis:map* (fn :header-dirs -> Array:from <| Iter:flatten [:includes, :header-dirs]) evaled:header-dirs
    header-deps = vis:map* (fn :uses-header-deps -> Map:from <| Iter:flatten [:uses-header-deps, :header-deps]) evaled:header-deps

    module-result evaled:uses { impl = :link, runtime, compile-commands, header-dirs, header-deps, ^:rest }
}

eval-flags = context-fn :ctx {compile-flags, link-flags} :f -> {
    newctx = {
        ^:ctx
        toolchain = {
            ^ctx:toolchain
            extra-compile-flags = !std:by-content :compile-flags
        }
    }
    link-flags = !std:by-content :link-flags
    std:dynamic:eval { ::context-key = :newctx } <| f :link-flags
}

## Flag a string as being an exact name, so that no target-specific rules are applied.
exact-name = {
    key = "ergo-cpp:exact-name"
    match:value [
        fn :name -> std:meta:set :name :key ()
        pat :out -> :name -> {
            std:if (std:meta:get :name :key) (bind :out :name) (std:Error: (source=:name) "not an exact-name")
            ()
        }
    ]
}

## Link a module.
link = context-fn :ctx ^{abi-version = default :abi-version as ()} (Path :source) (String :name) (Module: :mod) :additional-flags :type :include-headers -> Module: {
    os = ctx:toolchain:target:os
    start-group-flag = match :os [
        linux -> ["-Wl,--start-group"]
        _     -> []
    ]

    end-group-flag = match :os [
        linux -> ["-Wl,--end-group"]
        _     -> []

    ]

    # Handle abi version specifics
    {abi-flags,abiname,links,^_} = match :abi-version [
        String :s -> {
            max-version = String:split . :s |>:0
            String :compat-version = match :os [
                macos -> {
                    String:format "{}.dylib" :prefix = :name
                    String:format "{}.{}.dylib" :prefix :max-version
                }
                _ -> String:format "{}.{}" :name :max-version
            ]
            abi-flags = match :os [
                macos -> {
                    install-name = String:format "-Wl,-install_name,{}" :compat-version
                    match :max-version [
                        0 -> [:install-name]
                        _ -> [
                            :install-name,
                            String:format "-Wl,-compatibility_version,{}" :max-version,
                            String:format "-Wl,-current_version,{}" :abi-version
                        ]
                    ]
                }
                # XXX For now assume windows is using something gnuish
                _ -> [String:format "-Wl,-soname,{}" :compat-version]
            ]
            String :abiname = match :os [
                macos -> {
                    String:format "{}.dylib" :prefix = :name
                    String:format "{}.{}.dylib" :prefix :s
                }
                _ -> String:format "{}.{}" :name :s
            ]
            links = {
                ::name = :compat-version
                ::compat-version = !match :abiname [(!:compat-version) -> :unset, std:Function:pass]
            }
        }
        _ -> {
            abi-flags = []
            abiname = :name
            links = {}
        }
    ]

    call-site = Path:relative ctx:project-root :source

    subdir = Path:join Path:new: :call-site
    file = Path:join :subdir :abiname

    [:file,:fcache] = cached-path ctx:options:cache-policy :file [:call-site, :abiname, ctx:toolchain:compiler, ctx:toolchain:link-flags, :additional-flags]

    file = fcache {
        fs:create-dir <| Path:parent :file
        (run (String:format "linking {} {}" :type :name) (env = { PATH = env:get PATH }) ctx:toolchain:compiler
            ^ctx:toolchain:link-flags ^:additional-flags ^:abi-flags -o :file ^:start-group-flag ^mod:impl ^:end-group-flag)
        # Make symlinks
        Iter:map (fn (std:MapEntry: :to :from) -> {
            path = Path:join (Path:parent :file) :to
            std:if (fs:exists :path) () (exec ln -sf :from :path |>:complete)
        }) :links
        :file
    }

    links = Array:from <| Iter:map (fn (std:MapEntry: :to _) -> Path:join (Path:parent :file) :to) :links

    {
        file
        impl = [:file,^mod:runtime]
        runtime = mod:runtime
        runtime-if-used = [:file,^:links]
        ^!std:if :include-headers { std:import {header-deps,header-dirs} = :mod } {}
        compile-commands = mod:compile-commands
    }
}

rename = context-fn :ctx :f :name -> match :name [
    exact-name :name -> :name
    :name -> ctx:toolchain:target::f :name
]

## Create an executable module from a module.
##
## Arguments: `(Map :config)`
##
## The `config` includes:
## * `String :name` - the name of the executable
## * `Module :mod` - the module to make into an executable
## * `optional (Array :compile-flags)` - additional compile flags to use
## * `optional (Array :link-flags)` - additional link flags to use
exe = fn (source = std:Path:or-source :source) {
    name = String :name
    module
    compile-flags = default (Array :compile-flags) as []
    link-flags = default (Array :link-flags) as []
} -> {
    eval-flags {compile-flags,link-flags} <| fn :extra-link-flags -> {
        link :source (rename exe-name :name) :module :extra-link-flags executable Bool:false
    }
}

## Create a dynamic library module from a module.
##
## Arguments: `(Map :config)`
##
## The `config` includes:
## * `String :name` - the name of the library
## * `Module :mod` - the module to make into a library
## * `optional (Array :compile-flags)` - additional compile flags to use
## * `optional (Array :link-flags)` - additional link flags to use
## * `optional (String :abi-version)` - the abi version of the dynamic library
##   This is used to determine file names and set binary properties. It must be a string of the form
##   `X[.Y[.Z]]`, where `X`, `Y`, and `Z` are non-negative integers.
dynamic-library = fn (source = std:Path:or-source :source) {
    name = String :name
    module
    compile-flags = default (Array :compile-flags) as []
    link-flags = default (Array :link-flags) as []
    abi-version = std:optional (String :abi-version)
} -> {
    # Must always have -fPIC when compiling code in a shared library.
    compile-flags = [^:compile-flags,-fPIC]
    eval-flags {compile-flags,link-flags} <| fn :extra-link-flags -> {
        link ^{abi-version} :source (rename dynamic-library-name :name) :module [-shared,^:extra-link-flags] "dynamic library" Bool:true
    }
}

## Create a static library module from a module.
##
## Arguments: `(Map :config)`
##
## The `config` includes:
## * `String :name` - the name of the library
## * `Module :mod` - the module to make into a library
## * `optional (Array :compile-flags)` - additional compile flags to use
static-library = context-fn :ctx (source = std:Path:or-source :source) {
    name = String :name
    module
    compile-flags = default (Array :compile-flags) as []
} -> {
    eval-flags {compile-flags} <| fn _ -> {
        Module: :mod = :module

        call-site = Path:relative ctx:project-root :source

        filename = rename static-library-name :name
        file = Path:join Path:new: :call-site :filename

        [:file,:fcache] = cached-path ctx:options:cache-policy :file [:call-site, :filename, ctx:toolchain:archiver]

        file = fcache {
            fs:create-dir <| Path:parent :file
            run (String:format "creating static library {}" :filename) ctx:toolchain:archiver -crs :file ^mod:impl
            :file
        }

        Module: {
            file
            impl = [:file]
            runtime = mod:runtime
            header-dirs = mod:header-dirs
            header-deps = mod:header-deps
            compile-commands = mod:compile-commands
        }
    }
}

Options = pat :opts -> default {
    cache-policy = default :cache-policy as configuration
} as {} -> {
    bind :opts { cache-policy }
}

## Get the output of a Module, using the given configuration.
##
## Arguments: `(Map :config) :module`
##
## The `config` includes:
## * `Path :project-root` (required) - the project root directory, in which all source files to be
##   compiled must exist. This is used so debug info can contain the relative directories of the
##   files.
## * `:toolchain` - the toolchain to use, using the default toolchain if unspecified.
## * `:options` - a map of options affecting behavior, including:
##   * :cache-policy` - may be one of the following:
##      * `configuration` (default) - Outputs are cached based on compilation flags.
##        `exe`/`dynamic-library`/`static-library` outputs _must_ have unique names on a per-script
##        basis. This is because the caching relies on the script path and name when determining the
##        cache target file.
##      * `content` - Outputs are cached based on compilation flags and file content. For example,
##        if you compile, change a file, compile again, and then revert the change, no recompilation
##        will occur because there will already be a compiled output in the cache. This is most
##        useful if switching between branches/commits often.
##
## The configuration will be used to create the ergo-cpp context with the same keys, and this
## context will be used to evaulate `module`. Any additional unrecognized keys will be present as a
## map under the `extra` key in the context.
get-output = fn {
    project-root = Path :project-root
    toolchain = default (Map :tc) as !(toolchain {})
    options = Options :options
    ^:extra
} :module -> {
    Module: :v = std:dynamic:eval { ::context-key = { project-root, toolchain = :tc, options, extra } } :module
    :v
}

## Create a compile_commands.json file for all compile commands in the outputs.
##
## Arguments: `^:outputs`
##
## The outputs should be obtained with `get-output`.
##
## Returns a Path to a compile_commands.json file.
compile-commands = fn ^:outputs -> {
    path = Path:new:
    file = Path:join :path compile_commands.json
    commands = !Array:from <| Iter:unique <| Iter:flatten <| Iter:map (fn :o -> o:compile-commands) outputs:positional
    fs:create-dir :path
    fs:write :file <| std:json:stringify :commands
    :file
}

## Execute an output.
##
## Arguments: `:output ^:args`
##
## Keyword Arguments:
## * `:runtime-uses` - an array of extra module outputs whose runtime should also be used as part of
##   the executable's runtime
##
## The output should be obtained with `get-output`.
## The output must provide an executable `file` key in the result (like `exe` does).
##
## Returns the result of running `exec`.
exec-output = fn :ret (runtime-uses = default :rt-uses as []) ^:args -> {
    runtime = Iter:flatten [ret:runtime, Iter:map (fn :m -> m:runtime) :rt-uses | Iter:flatten]
    libpath = cache <| Path:with-output <| fn :libpath -> {
        fs:create-dir :libpath # Ensure path exists if empty
        Array:from <| Iter:map (fn :f -> fs:copy :f :libpath) :runtime
    }
    rt-env = match env:os [
        windows -> { PATH = :libpath }
        macos -> { DYLD_LIBRARY_PATH = :libpath }
        # Use preloaded libraries when possible; this avoids issues with filenames not
        # matching linked dependency names (from, e.g., SONAME)
        linux -> { LD_PRELOAD = String:join ":" <| Iter:map (std:Function:partial String:format "{}") :runtime }
    ]
    exec ret:file ^:args (env = { ^default args:keyed:env as {}, ^:rt-env })
}

## The ergo-cpp library.
##
## To compile and link c++ code, this library abstracts groups of files and their header interfaces
## into _modules_. A single module represents compiled code and interfaces to it, but modules do not
## compile the code until necessary. Libraries and executables are also considered modules, and
## modules can depend on other modules. To evaluate a module (thus creating it concretely), use
## `get-output` with the configuration you desire.
##
## # context
## {{doc self:context}}
##
## # Modules
## {{std:doc:modules :self type}}
##
## # Functions
## {{(std:doc:functions :self module all-files header-paths
##    compiled-module
##    exe dynamic-library static-library exact-name
##    get-output toolchain env-toolchain
##    compile-commands exec-output)}}
{
    ## Types used in the library values.
    ##
    ## # Types
    ## {{std:doc:modules :self Module}}
    type = {Module}
    context
    module
    compiled-module
    exe
    dynamic-library
    static-library
    get-output
    toolchain
    env-toolchain
    all-files
    header-paths
    exact-name
    compile-commands
    exec-output
}
