# The c++ module provides an abstraction over c++ compilation and linking.
# This module assumes binaries that are compatible with gcc flags (typically gcc and clang).
#
# TODO:
# * divorce the linking/native/binutils stuff from c/c++
# * separate c and c++ into separate libraries?

##std:doc:module
## The ergo-cpp library.
##
## To compile and link c++ code, this library abstracts groups of files and their header interfaces
## into _modules_. A single module represents compiled code and interfaces to it, but modules do not
## compile the code until necessary. Libraries and executables are also considered modules, and
## modules can depend on other modules. To be able to use a module, you must bind it with a context
## (using `bind-context`) which determines the configuration of the module.
{
    std:import :Module = load src/Module
    std:import :ModuleLink = load src/ModuleLink
    std:import { :context, :bind-context, :modify-context } = load src/context
    ^load src/module
    ^load src/toolchain
}
