std:import {
    :Array, :Error, :Iter, :Map, :Path, :String,
    :cache, :default, :exec, :fs, :if, :match, :task, trait={Into={:into}}
} = $std
std:import { :context } = load context
std:import :ModuleLink = load ModuleLink

# TODO flags passed to `compile` should account for identities correctly (wrt untracked-flags)

toolchain-compile-flags = fn :toolchain :compiler -> !id <| match $compiler [
    cc -> [
        ^toolchain:c-compile-flags
        ^{default :x as [] = toolchain:extra-c-compile-flags; $x}
    ]
    c++ -> [
        ^toolchain:compile-flags
        ^{default :x as [] = toolchain:extra-compile-flags; $x}
    ]
]

## Convert an array of header directories to include arguments for the compiler.
to-includes = fn :header-dirs -> {
    $header-dirs | Iter:map (fn :d -> [-I,$d]) | Iter:flatten | Array:from
}

## Create operations for the given toolchain and file.
##
## Arguments: `:compiler :file ^:flags`
##
## Must have `ergo-cpp:context` available when evaluated.
##
## `compiler` should be `cc` or `c++`.
##
## If `cache-policy` is `configuration`, the returned path will be based on the configuration.
## If `cache-policy` is `content`, the returned path based on the configuration and file content.
##
## Returns a Map with operations on the file.
for-file = fn :compiler (Path :file) ^:flags -> {
    std:import { :project-root, options={:cache-policy}, :toolchain } = $context
    Path :proj-path = Path:relative $project-root $file
    tracked-file = workspace:track $file
    tc-flags = toolchain-compile-flags $toolchain $compiler
    compiler = !id toolchain:tools:$compiler
    configuration-id = [$compiler, $tc-flags, $flags]
    String :policy = match $cache-policy [
        configuration -> std:identity $configuration-id
        content -> std:identity [$configuration-id, $tracked-file]
    ]

    String :key = "$proj-path.$policy.o"

    flags = Array:from $flags

    # TODO add warnings for using secondary headers?
    ## Track the content of $proj-path using the c preprocessor, tracking the file and all included files.
    ##
    ## `public-headers` should be an array of includes (like `:include` of `Module`).
    ## `private-headers` should be a Map where keys are the header paths.
    track-cpp = fn { public-headers = Array :public-headers, :file-type, :private-headers } -> {
        { ~(default :known-headers as [])
          ~(default :includes as []) } = Iter:partition (fn :hdr -> if (hdr:files) known-headers else includes) $public-headers
        public-include-flags = to-includes <| Iter:map (fn :hdr -> hdr:dir) $includes
        known-headers = Map:from <| Iter:flatten <| Iter:map (fn :hdr -> hdr:files) $includes

        # Generate and cache the array of dependent files using the toolchain.
        Array :deps = cache ~key=[$key,deps] ~allow-error=top <| task ~count=1 "determining dependencies of $proj-path" {
            file-type-flag = if $file-type "-x$file-type"
            child = exec ~env=toolchain:tool-exec-env $compiler ^[
                ^tc-flags
                ^flags
                ^public-include-flags
                # get user dependencies, include missing dependencies, and add phony targets for each (which is easier to parse)
                -DERGO_CPP_HEADER_DEPENDS, -MM, -MG, -MP
                $file-type-flag
                $tracked-file
            ]
            if child:exit {
                into $Array |> :deps = (
                    child:stdout | String:from
                    # Split into lines
                    | String:split "\n"
                    # Take only lines that end with a colon (these are all the ones we want due to `-MP`)
                    | Iter:map (fn :p -> match $p [String:match "{}:" :p -> $p, _ -> $unset]) | Iter:true
                    # Account for filenames with spaces (which have an escape character)
                    # XXX hopefully there aren't other special characters that are escaped...
                    | Iter:map (fn :name -> <| $name | String:split "\\ " | String:join " ")
                )
                $deps
            } else {
                workspace:log:warn "Couldn't determine dependencies for $proj-path"
                match $file-type [
                    c++-header -> workspace:log:warn child:stderr
                    _ -> Error:new ~source=$file child:stderr
                ]
                []
            }
        }
        # split files based on whether they exist or not
        # TODO set an appropriate cache key based on the cache policy
        { ~(default :exists as [])
          ~(default :to-check as []) } = cache {
            Iter:partition (fn :dep -> if (fs:exists <| Path:from $dep) exists else to-check) $deps
        }
        Array :exist-depends = Array:from <| Iter:map workspace:track $exists
        banned-check = if $private-headers (fn :x -> if private-headers:$x { Error:new ~source=$file "private include ($x) used in public header $proj-path" }) else (fn _ -> ())
        String :id = cache {
            into $Array |> :known-depends = Iter:no-errors <| Iter:map (fn :dep -> !id <| match known-headers:$dep [
                    $unset -> banned-check $dep
                    :v -> $v
            ]) $to-check
            std:identity [$exist-depends, $known-depends, $tracked-file, $configuration-id]
        }
        std:variable ~depends=$id $file
    }

    ## Create a compiled file.
    compiled = fn { public-headers = Array :public-headers } -> {
        tracked-file = track-cpp { public-headers }
        include-flags = to-includes <| Iter:map (fn :hdr -> hdr:dir) $public-headers
        obj = Path:join std:env:project-dir c++ $key

        # Always enable PIC by default; this works better for not surprising people with code that
        # can't be linked into a dynamic library (either objects or static libraries). The user can
        # always use `-fno-PIC` to undo this.
        args = Array:from <| Iter:flatten [
            [$compiler,-fPIC,-c,-o,$obj]
            $tc-flags
            $flags
            $include-flags
            [$tracked-file]
        ]

        ##std:doc:value
        ## The object file resulting from compiling $proj-path.
        object = cache ~key=$key {
            obj = Path:owned $obj
            fs:create-dir <| Path:parent $obj
            task ~count=1 "compiling $proj-path" { exec ~env=toolchain:tool-exec-env ^args; () }
            $obj
        }

        ##std:doc:value
        ## The compile command entry for compiling $proj-path (suitable for `compile_commands.json`).
        compile-command = {
            arguments = Array:from <| Iter:map String:from $args
            file = String:from $file
            output = String:from $obj
            directory = "/"
        }

        { object, compile-command }
    }

    { track-cpp, compiled }
}

## Create a header directory.
##
## Arguments: `:dir :headers`
##
## Must have `ergo-cpp:context` available when evaluated.
header-dir = fn (Path :dir) :headers -> {
    std:import { :project-root, options={:cache-policy} } = $context
    Path :proj-path = Path:relative $project-root $dir
    tracked-headers = Map:from <| Iter:map (fn :e -> std:MapEntry:new e:key (workspace:track <| Path:join $dir e:value)) $headers
    String :policy = match $cache-policy [
        configuration -> std:identity $headers
        content -> std:identity $tracked-headers
    ]

    dir = Path:join std:env:project-dir c++ $proj-path "inc.$policy"

    cache ~key=[$proj-path,$policy] {
        dir = Path:owned $dir
        fs:remove $dir
        fs:create-dir $dir
        Array:from <| Iter:map (fn (std:MapEntry:@ :to :from) -> fs:copy ~shallow=symbolic $from (Path:join $dir $to)) $tracked-headers
        $dir
    }
}

## Link files.
##
## Arguments: `:description (Path :source) (String :name) (Array:of $$ModuleLink |> :link) ^:flags`
##
## Keyed Arguments:
## * `abi-version` - the abi version to set, if any. If set, appropritae abi version links will be
## created.
##
## Must have `ergo-cpp:context` available when evaluated.
##
## Returns a map with:
## * `file` - the linked file
## * `links` - an Array of symlinks implementing the file ABI interface. This will be empty if and
## only if `abi-version` is unset.
link = fn :description (Path :source) (String :name) (Array:of $ModuleLink |> :link) ~:abi-version ^:flags -> {
    std:import { :project-root, :toolchain, options={:cache-policy} } = $context
    os = toolchain:target:os
    start-group-flag = match $os [
        linux -> ["-Wl,--start-group"]
        _     -> []
    ]

    end-group-flag = match $os [
        linux -> ["-Wl,--end-group"]
        _     -> []

    ]

    # Handle abi version specifics
    {:abi-flags,:abiname,:links,^_} = match $abi-version [
        String :s -> {
            max-version = String:split . $s |>:0
            String :compat-version = match [$os,$name] [
                [macos,String:match "{}.dylib" :prefix] -> "$prefix.$max-version.dylib"
                _ -> "$name.$max-version"
            ]
            abi-flags = match $os [
                macos -> {
                    install-name = "-Wl,-install_name,$compat-version"
                    match $max-version [
                        0 -> [$install-name]
                        _ -> [
                            $install-name,
                            "-Wl,-compatibility_version,$max-version",
                            "-Wl,-current_version,$abi-version"
                        ]
                    ]
                }
                # XXX For now assume windows is using something gnuish
                _ -> ["-Wl,-soname,$compat-version"]
            ]
            String :abiname = match [$os,$name] [
                [macos,String:match "{}.dylib" :prefix] -> "$prefix.$s.dylib"
                _ -> "$name.$s"
            ]
            links = {
                :$name = $compat-version
                std:Type:any :$compat-version = match $abiname [$compat-version -> $unset, std:Function:pass]
            }
        }
        _ -> {
            abi-flags = []
            abiname = $name
            links = {}
        }
    ]

    Path :proj-path = Path:relative $project-root $source
    tc-flags = !id toolchain:link-flags
    linker = !id toolchain:tools:c++
    configuration-id = [$linker, $tc-flags, $abi-version, $flags]
    String :policy = match $cache-policy [
        configuration -> std:identity $configuration-id
        content -> std:identity [$configuration-id, $link]
    ]
    Path :key = Path:join $proj-path "$abiname.$policy"

    path = Path:join std:env:project-dir c++ $key

    path = cache ~key=$key {
        path = Path:owned $path
        fs:create-dir $path
        task ~count=1 "linking $description $name" {
            (toolchain:exec c++ ^tc-flags ^flags ^abi-flags -o (Path:join $path $abiname)
                ^start-group-flag ^(ModuleLink:unwrap $link) ^end-group-flag)
            ()
        }
        # Make symlinks
        Iter:map (fn (std:MapEntry:@ :to :from) -> fs:copy ~shallow=symbolic (Path:from $from) <| Path:join $path $to) $links
        $path
    }

    {
        file = Path:join $path $abiname
        links = Array:from <| Iter:map (fn (std:MapEntry:@ :to _) -> Path:join $path $to) $links
    }
}

## Create an archive of object files.
##
## Arguments: `(Path :source) (String :name) (Array:of $$Path |> :link)`
##
## `link` should be an Array of object files to archive.
##
## Must have `ergo-cpp:context` available when evaluated.
##
## Returns the archive.
static-link = fn (Path :source) (String :name) (Array:of $Path |> :link) -> {
    std:import { :project-root, :toolchain, options={:cache-policy} } = $context

    Path :proj-path = Path:relative $project-root $source
    archiver = !id toolchain:tools:ar
    configuration-id = [$archiver]
    String :policy = match $cache-policy [
        configuration -> std:identity $configuration-id
        content -> std:identity [$configuration-id, $link]
    ]
    Path :key = Path:join $proj-path "$name.$policy"

    path = Path:join std:env:project-dir c++ $key

    cache ~key=$key {
        path = Path:owned $path
        fs:create-dir <| Path:parent $path
        task ~count=1 "creating static library $name" {
            toolchain:exec ar -crs $path ^link
            ()
        }
        $path
    }
}
