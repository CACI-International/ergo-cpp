std:import { :Array, :Iter, :Function, :String, :match, trait={Into={:into}} } = $std

##std:doc:module
## Module linking type.
##
## This type is used in the `link` field resulting from evaluating modules.
##
## It has the following String constructors:
## `Object`, `StaticLib`, `DynamicLib`, `Flag`
{
    std:import { :enum, :index, :modify, :pass } = std:Type

    Link = enum "ergo-cpp:Link" {
        # These are all `pass` because we don't want to force evaluation of inner values (otherwise
        # evaluation may end up serialized).
        Object = $pass
        StaticLib = $pass
        DynamicLib = $pass
        Flag = $pass
    }

    ## Get the inner Link values with the given types.
    ##
    ## Arguments: `(Array:of $$String |> :types) (into $$Iter |> :link)`
    ##
    ## Returns an Array.
    types = fn (Array:of $String |> :types) (into $Iter |> :link) -> (
        $link
        | Iter:map (fn (Link :x) -> match $x [
            ^Array:from <| Iter:map (fn :type -> Link:@:$type :s -> {val = $s}) $types
            _ -> std:Bool:false
            ])
        | Iter:true
        | Iter:map (fn {:val} -> $val)
        | Array:from
    )

    ## Get the Link values with the given types.
    ##
    ## Arguments: `(Array:of $$String |> :types) (iter $$Iter |> :link)`
    ##
    ## This differ from `types` as it doesn't unwrap the inner values.
    ##
    ## Returns an Array of Link.
    subset = fn (Array:of $String |> :types) (into $Iter |> :link) -> (
        $link
        | Iter:map (fn (Link :x) -> match $x [
            ^Array:from <| Iter:map (fn :type -> std:bind:and :v (Link:@:$type _) -> {val = $v}) $types
            _ -> std:Bool:false
            ])
        | Iter:true
        | Iter:map (fn {:val} -> $val)
        | Array:from
    )

    ## Map a function over the inner Link values.
    ##
    ## Arguments: `(Function :f) (into $$Iter |> :link)`
    ##
    ## Returns an Array of Link.
    map = fn (Function :f) (into $Iter |> :link) -> (
        $link
        | Iter:map (fn (Link :x) -> match $x [
            ^Array:from <| Iter:map (fn :type -> Link:@:$type :s -> Link:$type <| f $s) [Object,StaticLib,DynamicLib,Flag]
            _ -> std:Bool:false
            ])
        | Array:from
    )

    ## Get the inner Link values.
    ##
    ## Arguments: `(into $$Iter |> :link)`
    ##
    ## Returns an Array.
    unwrap = Function:partial $types [Object,StaticLib,DynamicLib,Flag]

    modify $Link {
        ^index $Link
        map, subset, types, unwrap
    }
}
