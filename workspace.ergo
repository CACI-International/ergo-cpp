# The c++ module provides an abstraction over c++ compilation and linking.
# This module assumes binaries that are compatible with gcc flags (typically gcc and clang).

^ergo std

log = log sublog c++

# If the first argument is a truth value, return it, otherwise return the second argument.
unless = fn a b -> if :a :a :b

unless-map = fn m k else -> !if (collection:has :m :k) m::k :else

# Return the value of an environment variable, or an alternative value if not set.
env_or = fn name alternative -> value:by-content <| unless (env:get :name) :alternative

# Run an executable as a task (counting as one task).
run = fn description ^args ^{^kwargs} -> task ^{task-count = 1} :description (exec ^:args ^:kwargs):complete

filter = fn f arr -> collection:fold (fn acc v -> if (f :v) [^:acc,:v] :acc) [] :arr

parse-env-flags = fn var -> {
    strs = string:split " " (env_or :var "")
    # collection:filter
    filter (fn v -> match (value:by-content :v) {
        ="" = ()
        _ = true
    }) :strs
}

toolchain = fn config -> {
    compiler = env:path-search <| unless-map :config compiler c++
    archiver = env:path-search <| unless-map :config archiver ar
    compile-flags = unless-map :config compile-flags []
    link-flags = unless-map :config link-flags []

    detect = fn filename -> value:cache <| value:by-content {
        file = path:join :script-dir detection :filename
        output = exec ^{ env = { PATH = env:get PATH } } :compiler ^:compile-flags -E -P :file |>:stdout
        output = :output | string:from | string:trim | string:split "\"" |>:1
        !log debug <| string:format "detection file `{}` yielded `{}`" :filename :output
        :output
    }

    {
        compiler
        archiver
        compile-flags
        link-flags
        target = {
            architecture = detect arch.h
            os = detect os.h
            compiler = detect compiler.h
        }
    }
}

env-toolchain = toolchain {
    compiler = env_or CXX c++
    archiver = env_or AR ar
    compile-flags = env_or CXXFLAGS []
    link-flags = env_or LDFLAGS []
}

lib-path-env = fn toolchain path -> value:by-content (match toolchain:target:os {
    =macos = { DYLD_LIBRARY_PATH = :path }
    =ios = { DYLD_LIBRARY_PATH = :path }
    =linux = { LD_LIBRARY_PATH = :path }
    _ = { PATH = :path }
})

static-library-name = fn toolchain name -> match toolchain:target:os {
    =windows = string:format "{}.lib" :name
    _ = string:format "{}.a" :name
}

dynamic-library-name = fn toolchain name -> match toolchain:target:os {
    =windows = string:format "{}.dll" :name
    =linux = string:format "lib{}.so" :name
    =macos = string:format "lib{}.dylib" :name
    =ios = string:format "lib{}.dylib" :name
    _ = :name
}

exe-name = fn toolchain name -> match toolchain:target:os {
    =windows = string:format "{}.exe" :name
    _ = :name
}

# Compile a file with the given flags.
# The project-root argument is used to ensure the file paths in compiled debug sections are user-friendly.
compile = fn toolchain project-root file untracked-flags ^flags -> value:cache <| seq ^[
    out = path:join (path:new) (string:format "{}.o" <| path:relative :project-root :file)
    fs:create-dir <| path:parent :out
    run (string:format "compiling {}" :file) ^{ env = { PATH = env:get PATH } } toolchain:compiler ^toolchain:compile-flags -c -o :out ^(value:variable :untracked-flags) ^:flags :file
    :out
]

# collection:precede
to-includes = fn header-dirs -> collection:fold (fn l dir -> [^:l,-I,:dir]) [] :header-dirs

with-context = fn f -> {apply-context = :f}

verify-module = fn m -> !match :m {
    {apply-context} = (),
    _ = !error:throw "not an ergo-cpp module"
}

fix = fn f -> fn ^args ^{^kwargs} -> f :f ^:args ^:kwargs

# Return a file path that depends on all include dependencies, given a map of header paths to dependencies
# that will be used for includes that do not resolve to a file.
set-file-deps = fn toolchain file untracked-compile-flags compile-flags known-headers -> {
    deps = exec ^{ env = { PATH = env:get PATH } } toolchain:compiler ^toolchain:compile-flags -DERGO_CPP_HEADER_DEPENDS -MM -MG ^:untracked-compile-flags ^:compile-flags :file |>:stdout | string:from | string:trim
    # string:regex
    [_,^parts] = string:split ":" :deps
    parts = collection:fold (fn arr p -> [^:arr,^(string:split "\\\n" :p)]) [] :parts
    parts = collection:fold (fn arr p -> [^:arr,^(string:split " " :p)]) [] :parts
    parts = collection:fold (fn arr p -> match :p { ="" = :arr, o = [^:arr,:o] }) [] :parts
    parts = value:cache <| value:variable ^{ depends = [file-deps, fs:track :file, toolchain:compiler, toolchain:compile-flags, :compile-flags] } :parts
    # existing files depend on the result of fs:track, otherwise look in known-headers
    depends = !collection:map (fn dep -> !if (fs:exists <| path:join :dep) (fs:track :dep) (unless-map :known-headers !:dep ())) :parts
    value:variable ^{ depends } :file
}

# Convert a path to an include string
path-to-include = fn p -> {
    [a,^rest] = path:split :p
    # string:join
    value:by-content <| collection:fold (fn s c -> string:format "{}/{}" :s :c) :a :rest
}

# Returns a map of include paths (as strings) to tracked header files.
make-header-paths = fix (fn self dir descr -> {
    basename = fn f -> { [^_,f] = path:split :f; path:join :f }
    !match !:descr {
        =auto = value:by-content <| collection:map (fn a -> {from = :a, to = basename :a}) <| fs:glob <| path:join :dir *.h
        [^files] = value:by-content <| collection:map (fn a -> {from = :a, to = basename :a}) :files
        {^dirs} = {
            !collection:fold (fn ret {key,value} -> [^:ret,^{
                paths = self :self :dir :value
                !collection:map (fn {from,to} -> {from,to = path:join :key :to}) :paths
            }]) [] <| collection:entries :dirs
        }
    }
})

# Remove duplicate values in an array
uniq = fn arr -> {
    !collection:fold (fn state a -> !if (collection:has state:0 :a) :state [{^state:0, :a = ()},![^state:1,:a]]) [{},[]] :arr |>:1
}

# Create a module in the given directory (used for auto parameters) with the given configuration.
#
# The configuration may be "auto", which will get all .cpp and .h files as the
# (non-public) module contents.  Otherwise, it should be a map with the
# following optional keys:
#   files: the files to compile, or "auto"
#   headers: the headers to expose
#   uses: the modules to use with this module
#
# Headers may be an array of files, "auto", or a map where the keys represent a
# directory, and values are "auto" or an array of files. "auto" will use all
# *.h files in the module path.
#
# The returned module generator function, when passed a compilation context,
# will return a module output map with the following keys:
#   impl: an array of compiled object files
#   header-dirs: an array of header directories exported by the module (and all directories from used modules)
#   runtime: an array of any additional requirements of the module (inherited from used modules)
module = fn dir config -> {
    config = match :config {
        =auto = { files = auto, headers = auto }
        other = :other
    }

    default = fn name -> unless-map :config :name []
    files = default files
    headers = default headers
    uses = default uses
    compile-flags = unless-map :config compile-flags (fn e -> [])

    files = match (value:by-content :files) {
        =auto = value:by-content <| fs:glob <| path:join :dir *.cpp
        other = :other
    }
    headers = make-header-paths :dir (value:by-content :headers)

    # verify uses are modules
    !collection:map :verify-module :uses

    with-context (fn context -> {
        uses = !collection:map (fn u -> u:apply-context :context) :uses
        # collection:flatten
        header-dirs = collection:fold (fn l use -> [^:l,^use:header-dirs]) [] :uses
        header-dir = value:cache <| seq ^[
            dir = (path:new)
            fs:create-dir :dir
            collection:map (fn {from,to} -> fs:copy (fs:track :from) (path:join :dir :to)) :headers
            :dir
        ]
        header-dirs = [:header-dir,^uniq :header-dirs]
        includes = to-includes :header-dirs
        compile-flags = compile-flags context:extra

        # Create maps from header path to dependency
        # collection:filter
        uses-header-deps = !collection:fold (fn m use -> !if (collection:has :use header-deps) {^:m,^use:header-deps} :m) {} :uses
        # collection:map, collection:from-entries
        mod-header-deps = !collection:fold (fn m {from,to} -> {^:m, (path-to-include :to) = set-file-deps context:toolchain :from [-I,:header-dir] :compile-flags :uses-header-deps}) {} :headers
        header-deps = {^:uses-header-deps,^:mod-header-deps}

        objects = collection:map (fn f -> compile context:toolchain context:project-root (set-file-deps context:toolchain :f [] :compile-flags :header-deps) :includes ^:compile-flags) :files
        # collection:flatten
        impl = collection:fold (fn l use -> [^:l,^use:impl]) :objects :uses
        # collection:flatten
        runtime = collection:fold (fn l use -> [^:l,^use:runtime,^(value:by-content <| unless-map :use runtime-if-used [])]) [] :uses
        { impl, header-dirs, header-deps, runtime }
    })
}

propagate-flags = fn ^{^kwargs} context -> {
    get-flags = fn key -> value:by-content (if (collection:has :kwargs :key) (kwargs::key context:extra) [])
    {
        ^:context,
        toolchain = {
            ^context:toolchain
            compile-flags = ![^context:toolchain:compile-flags, ^get-flags compile-flags]
            link-flags = ![^context:toolchain:link-flags, ^get-flags link-flags]
        }
    }
}

# Link a module.
link = fn name mod additional-flags type include-headers -> {
    verify-module :mod
    with-context (fn context -> {
        out = (path:new)
        file = path:join :out :name

        mod = mod:apply-context :context

        file = value:cache <| seq ^[
            fs:create-dir :out
            run (string:format "linking {} {}" :type :name) ^{ env = { PATH = env:get PATH } } context:toolchain:compiler ^context:toolchain:link-flags ^:additional-flags -o :file "-Wl,--start-group" ^mod:impl "-Wl,--end-group"
            :file
        ]
        ret = { file, impl = ![:file,^mod:runtime], runtime = mod:runtime, runtime-if-used = [:file] }
        !if :include-headers { ^:ret, header-deps = mod:header-deps, header-dirs = mod:header-dirs } :ret
    })
}

# Link a module into an executable.
exe = fn {name,module,^kwargs} -> {
    with-context (fn context -> {
        context = propagate-flags ^:kwargs :context
        mod = link (exe-name context:toolchain :name) :module [] executable ()
        ret = mod:apply-context :context
        {
            ^:ret
            exec = fn ^args ^{^kwargs} -> {
                libpath = value:cache <| seq ^[
                    libpath = (path:new)
                    fs:create-dir :libpath
                    collection:map (fn f -> fs:copy :f :libpath) <| value:by-content ret:runtime
                    :libpath
                ]
                exec ^{ env = {}, ^:kwargs, env = { ^:env, ^(lib-path-env context:toolchain :libpath) } } ret:file ^:args
            }
        }
    })
}

# Link a module into a dynamic library.
dynamic-library = fn {name,module,^kwargs} -> {
    kwargs = {
        compile-flags = fn _ -> []
        ^:kwargs
        compile-flags = fn e -> [^compile-flags :e,-fPIC]
    }
    with-context (fn context -> {
        mod = link (dynamic-library-name context:toolchain :name) :module [-shared] "dynamic library" true
        mod:apply-context <| propagate-flags ^:kwargs :context
    })
}

# Link a module into a static library.
static-library = fn {name,module,^kwargs} -> {
    verify-module :module
    with-context (fn context -> {
        out = (path:new)
        fs:create-dir :out
        filename = static-library-name context:toolchain :name
        out = path:join :out :filename
        mod = module:apply-context <| propagate-flags ^:kwargs :context
        run (string:format "creating static library {}" :filename) context:toolchain:archiver -crs :out ^mod:impl
        { file = :out, impl = [:file], runtime = mod:runtime, header-dirs = mod:header-dirs, header-deps = mod:header-deps }
    })
}

get-output = fn {project-root,^kwargs} t -> {
    verify-module :t
    toolchain = unless-map :kwargs toolchain <| toolchain {}
    extra = {^:kwargs, toolchain=}
    t:apply-context {project-root, toolchain, extra}
}

{
    module
    exe
    dynamic-library
    static-library
    get-output
    (value:doc:set name "toolchain file output naming conventions") = {
        static-library = :static-library-name
        dynamic-library = :dynamic-library-name
        exe = :exe-name
    }
    toolchain
    env-toolchain
}
